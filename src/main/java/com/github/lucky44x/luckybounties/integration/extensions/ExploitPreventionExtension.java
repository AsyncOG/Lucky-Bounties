package com.github.lucky44x.luckybounties.integration.extensions;

import com.github.lucky44x.api.luckybounties.events.BountyCollectEvent;
import com.github.lucky44x.luckybounties.LuckyBounties;
import com.github.lucky44x.luckybounties.abstraction.bounties.Bounty;
import com.github.lucky44x.luckybounties.abstraction.integration.EconomyHandler;
import com.github.lucky44x.luckybounties.abstraction.integration.Integration;
import com.github.lucky44x.luckybounties.abstraction.integration.exception.IntegrationException;
import com.github.lucky44x.luckybounties.bounties.types.EcoBounty;

import net.milkbowl.vault.economy.Economy;

import org.bukkit.entity.Player;
import org.bukkit.event.Listener;
import org.bukkit.event.EventHandler;

public class ExploitPreventionExtension extends Integration implements Listener {

    private int runnableID = -1;

    public ExploitPreventionExtension(LuckyBounties instance) {
        super(instance);
    }

    @Override
    public void onEnable() throws IntegrationException {
        runnableID = Bukkit.getScheduler().runTaskTimerAsynchronously(
                instance,
                new ExpiredBountiesRunnable(),
                0,
                instance.configFile.toTickTime(
                        instance.configFile.getExpiredCheckPeriod()))
                .getTaskId();
    }

    @Override
    public void onDisable() throws IntegrationException {
        Bukkit.getScheduler().cancelTask(runnableID);
    }

    @EventHandler
    public void onBountyCollect(BountyCollectEvent event) {
        EconomyHandler economyHandler = instance.getIntegrationManager().getEconomyHandler();

        double newBalance = 0;
        double amountToDeduct = 0;
        Player wanted = event.killed;

        for (Bounty b : event.getBounties()) {
            if (b instanceof EcoBounty ecoB) {
                amountToDeduct = ((EcoBounty) b).getReward();

                if (econ.hasAccount(wanted)) {
                    // Deducting the Amount from Wanted Player
                    econ.withdrawPlayer(wanted, amountToDeduct);

                    newBalance = econ.getBalance(wanted);
                    wanted.sendMessage("You have been deducted " + amountToDeduct + " " + econ.currencyNameSingular()
                            + ". Your new balance is " + newBalance + " " + econ.currencyNameSingular() + ".");
                } else {
                    wanted.sendMessage("An error occurred while accessing your account!");
                }

                break;
            }
        }
    }
}
